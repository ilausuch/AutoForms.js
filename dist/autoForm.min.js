AutoForm={emptyArray:[],verifiers:{email:function(t){return/^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$/.test(""+t)},noEmpty:function(t){return(""+t).length>0},verified:function(t){return!0},natural:function(t){return/^\d+$/.test(""+t)}}};class AutoFormContext{constructor(t){this.scope=t.scope,this.callLater=t.callLater,this.id="autoFormContext_"+Math.round(1e5*Math.random());var e=this;this.apply=function(){try{e.scope.$$phase||e.scope.$apply()}catch(t){}},this.watch=function(t,i){e.scope.$watch(t,i,!0)},this.equals=function(t,e){return angular.equals(t,e)},this.entityRegistry=new EntityRegistry(this),this.modelName=this.id+"_model",this.scope[this.modelName]=t.model,this.model=t.model,this.modelNotifier=new ModelNotifier(this),this.stateName=this.id+"_state",this.state={},this.scope[this.stateName]=this.state,this.stateNotifier=new StateNotifier(this),this.data={}}}class AutoFormException{constructor(t,e){this.text=t,this.data=e}}class Entity{constructor(t,e){this.$config=t,this.$type=e,this.$configured=!1,void 0!==t.context&&this.setup(t.context)}setup(t){if(!this.$configured){this.$configured=!0,this.context=t;var e=this.$config;if(void 0!==e.id?this.id=e.id:this.id=this.$type+"_"+Math.random(),this.context.entityRegistry.register(this),this.context.state[this.id]={},this.checkConfigDefaultValue("panel",!1),this.panel&&this.checkRequired("title"),void 0!==e.onModelChange){this.onModelChange=e.onModelChange;i=this;this.context.modelNotifier.addListenner(function(t){var e=t.model,s=t.changes,r=t.hasChanged;try{i.onModelChange({controller:i,model:e,changes:s,hasChanged:r})}catch(t){console.log(t)}})}if(void 0!==e.onStateChange){this.onStateChange=e.onStateChange;var i=this;this.context.stateNotifier.addListenner(function(t){var e=t.oldState,s=t.newState;try{i.onStateChange({controller:i,state:s,oldState:e})}catch(t){console.log(t)}})}void 0!==e.enabled?this.enabled=e.enabled:this.enabled=!0,void 0!==e.visible?this.visible=e.visible:this.visible=!0,this.onEvent=e.onEvent}}addInternalStateListenner(t){this.internalStateListenner=t;var e=this;this.context.stateNotifier.addListenner(function(t){var i=t.oldState,s=t.newState;e.internalStateListenner(e,s,i)})}setProperty(t,e){this[t]=e}checkRequired(t,e){if(void 0===this.$config[t])throw void 0===e&&(e=t+" is required"),new AutoFormException("Structure configuration error: "+e,{theConfig:this.config});this[t]=this.$config[t]}checkConfigDefaultValue(t,e){void 0===this.$config[t]?this[t]=e:this[t]=this.$config[t]}sendEvent(t){void 0!==this.onEvent&&this.context.callAfter(function(){this.onEvent({controller:this,data:t})})}}class EntityRegistry{constructor(t){this.context=t,this.assoc={},this.list=[]}register(t){if(void 0!==this.assoc[t.id])throw new AutoFormException("EntityRegistry: Entity already registered",{theId:t.id,theCurrentEntity:this.assoc[t.id],theEntityToRegister:t});this.assoc[t.id]=t,this.list.push(t)}get(t){if(void 0===this.assoc[t])throw new AutoFormException("EntityRegistry: Unkown entity",{theId:t});return this.assoc[t]}}class Notifier{constructor(){this.registry=[]}addListenner(t){this.registry.push(t)}notify(t){this.registry.forEach(function(e){e(t)})}}class Provider{constructor(t,e,i,s){if(this.context=t,"function"!=typeof e)throw new AutoFormException("Provider requires a valid function",{theFunction:e});this.updateFunction=e,this.conditions=i,this.model=void 0!==s?s:t.model,this.promise=new ilPromise,this.$conditionValues={};var r=this;t.modelNotifier.addListenner(function(t){r.getPromise()}),this.firstUpdate=!0}getPromise(){var t=this.context;if(this.firstUpdate||this.conditionsHasChanged()){var e=this;e.updateFunction({promise:e.promise,model:e.model,empty:t.emptyArray,clear:function(){this.promise.data=e.empty,t.apply()},ready:function(e){this.promise.ready(e),t.apply()},cancel:function(){this.promise.ready(e.empty),t.apply()}}),this.firstUpdate=!1}return this.promise}conditionsHasChanged(){this.context;var t=!1;return void 0!==this.conditions&&this.conditions.forEach(function(e){void 0!==this.$conditionValues[e]&&this.$conditionValues[e]===this.model[e]||(t=!0,this.$conditionValues[e]=this.model[e])},this),t}}class State{constructor(t,e){if(this.entity=t,void 0===e.id)throw new AutoFormException("Structure configuration error: state must have id",{theConfig:e});if(void 0===e.initValue)throw new AutoFormException("Structure configuration error: state must have an initValue",{theConfig:e});if(void 0===e.updater)throw new AutoFormException("Structure configuration error: state must define the updater function",{theConfig:e});this.id=e.id,this.initialValue=e.initValue,this.updater=e.updater,this.value=this.initialValue,t.context.state[this.entity.id][this.id]=this.initialValue}set(t){var e=this.value;this.value=t,t!==e&&(this.entity.context.state[this.entity.id][this.id]=t)}update(t,e){this.set(this.updater(t,e))}}class StateListenner{constructor(t,e){if(this.config=t,void 0===t)throw new AutoFormException("Structure configuration error (listenner): required config");if(void 0===t.entityId)throw new AutoFormException("Structure configuration error (listenner): required entityId",{theConfig:t});if(void 0===t.stateId)throw new AutoFormException("Structure configuration error (listenner): required stateId",{theConfig:t});if(void 0===t.callback)throw new AutoFormException("Structure configuration error (listenner): required callback",{theConfig:t});this.entityId=t.entityId,this.stateId=t.stateId,this.callback=t.callback,this.controller=e}notify(t){this.callback(this.controller,t)}}class EntityWithState extends Entity{constructor(t,e){super(t,e)}setup(t){if(super.setup(t),this.stateAssoc={},this.stateList=[],void 0!==this.$config.state){if(!Array.isArray(this.$config.state))throw new AutoFormException("Structure configuration error: state must be an array of strings",{theConfig:this.$config,theType:this.$type});this.$config.state.forEach(function(t){this.addState(t)},this)}}addState(t){var e=new State(this,t);this.stateList.push(e),this.stateAssoc[e.id]=e}updateState(t){void 0===t&&(t=this.context.model),this.stateList.forEach(function(e){e.update(this,t)},this)}getStateValue(t){if(void 0===this.stateAssoc[t])throw new AutoFormException("EntityWithState: State doesn't exist",{theEntity:this,theStateId:t});return this.stateAssoc[t].value}}class ModelNotifier extends Notifier{constructor(t){super();var e=this;t.watch(t.modelName,function(i,s){var r=[],o={};for(var n in i){var a=!1;for(var h in s)if(h===n){a=!0;try{(void 0===s[h]&&void 0!==i[n]||void 0!==s[h]&&void 0===i[n]||!t.equals(s[h],i[n]))&&(o[n]=i[n])}catch(t){console.log("error en ",n)}}a||(o[n]=i[n])}for(var c in o)r.push(c);r.length>0&&(e.notify({model:t.model,changes:r,hasChanged:function(t){return this.changes.indexOf(t)>=0}}),t.apply())})}}class ProviderFromStaticData extends Provider{constructor(t,e){super(t,function(t){t.ready(this.data)}),this.data=e}}class StateNotifier extends Notifier{constructor(t){super();var e=this;t.watch(t.stateName,function(i,s){e.notify({state:t.scope.state,newState:i,oldState:s})})}}class Container extends EntityWithState{constructor(t,e){super(t,e)}setup(t){super.setup(t),this.checkRequired("content");var e=this;this.addState({id:"verified",initValue:!1,updater:function(t,e){return t.verifiedUpdater(e)}}),this.addInternalStateListenner(function(t,i,s){e.updateState()}),this.content.forEach(function(e){e.setup(t)})}verifiedUpdater(t){var e=!0;return this.content.forEach(function(t){try{e&=t.getStateValue("verified")}catch(t){}}),e}}class Button extends EntityWithState{constructor(t){super(t,"button"),this.checkRequired("title"),this.checkRequired("onClick")}setup(t){super.setup(t)}onClick(t){this.onClick(this,t)}}class Field extends EntityWithState{constructor(t){switch(super(t,"field"),this.checkRequired("type"),this.checkRequired("label"),this.checkRequired("field"),this.checkConfigDefaultValue("required",!0),this.checkConfigDefaultValue("verify",void 0),this.type){case"list":case"radio":this.checkRequired("provider"),this.checkRequired("labelField"),this.checkRequired("valueField");break;case"select":this.checkRequired("provider"),this.checkRequired("labelField")}}setup(t){super.setup(t),this.addState({id:"verified",initValue:!1,updater:function(t,e){return t.verifiedUpdater(e)}})}verifiedUpdater(t){var e=!0;return void 0===t[this.field]||""===t[this.field]?this.required&&(e=!1):void 0===this.verify||this.verify(t[this.field])||(e=!this.required),e}}class Form extends EntityWithState{constructor(t){super(t,"form"),this.checkRequired("fields")}setup(t){super.setup(t),this.addState({id:"verified",initValue:!1,updater:function(t,e){return t.verifiedUpdater(e)}})}verifiedUpdater(t){var e=!0;return this.fields.forEach(function(i){void 0===t[i.field]||""===t[i.field]?i.required&&(e=!1):void 0===i.verify||i.verify(t[i.field])||(e=!i.required)}),e}}class Group extends Container{constructor(t){super(t,"group")}setup(t){super.setup(t)}}class Message extends EntityWithState{constructor(t){super(t,"message")}setup(t){if(super.setup(t),void 0!==this.$config.messages)this.setMessages(this.$config.messages);else{if(void 0===this.$config.provider)throw new Exception("Structure configuration error (Message): messages or provider is required",{theConfig:this.$config});this.checkRequired("provider")}this.checkConfigDefaultValue("mode","info")}setMessages(t){this.messages=t,this.checkMessageConfiguration()}checkMessageConfiguration(){this.messages.forEach(function(t){if(void 0===t.text)throw new Exception("Structure configuration error (Message): Bad message configuration",{theConfig:config,theMessageConfig:t})})}}class Modal extends Container{constructor(t){super(t,"modal")}setup(t){super.setup(t)}}class ModalSelector extends Container{constructor(t){super(t,"modalSelector"),this.checkRequired("label"),this.checkRequired("title"),this.checkRequired("field"),this.checkRequired("labelField"),this.checkConfigDefaultValue("required",!0),this.checkRequired("onAccept")}setup(t){super.setup(t),this.modalVisible=!1,this.addState({id:"verified",initValue:!1,updater:function(t,e){return t.verifiedUpdater(e)}})}show(){this.modalVisible=Math.random()}verifiedUpdater(t){var e=!0;return void 0!==t[this.field]&&""!==t[this.field]||this.required&&(e=!1),e}}class Root extends Group{constructor(t){super(t,"group"),this.checkRequired("context")}}